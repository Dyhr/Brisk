#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using Brisk.Config;
using Brisk.Entities;
using Brisk.Serialization;
using UnityEditor;
using UnityEngine;

namespace Brisk.Actions
{
    public static class ActionGenerator
    {
        [MenuItem("Brisk/Generate Action Set", false, 4)]
        public static void GenerateClasses()
        {
            var types = AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(a => a.GetTypes())
                .Where(t => t.IsClass && t.IsSubclassOf(typeof(NetBehaviour)));


            var actions = new Dictionary<Type, List<Tuple<MethodInfo, int>>>();
            var actionList = new List<string>();
            foreach (var type in types)
            {
                foreach (var method in type.GetMethods())
                {
                    if (Attribute.GetCustomAttribute(method, typeof(Action)) == null) continue;
                    if (!actions.ContainsKey(type)) actions.Add(type, new List<Tuple<MethodInfo, int>>());
                    actions[type].Add(Tuple.Create(method, actionList.Count));

                    actionList.Add($"{type.FullName}.{method.Name}");
                }
            }
            
            
            var result = new StringBuilder();
            result.AppendLine("// #### AUTO-GENERATED CODE ####");
            result.AppendLine("// Please avoid editing");
            result.AppendLine("// Copyright Â© Brisk Technologies");
            result.AppendLine("");
            result.AppendLine("namespace Brisk.Actions {");
            result.AppendLine("    public sealed class AutoGenerated_BriskActionSet : Brisk.Actions.ActionSet {");

            //AddList(result, actionList);
            //result.AppendLine("");
            AddActions(result, actions);
            
            result.AppendLine("    }");
            result.AppendLine("}");
            
            File.WriteAllText("Assets/Resources/AutoGenerated_BriskActionSet.cs", result.ToString());
            AssetDatabase.Refresh();
        }

        [MenuItem("Brisk/Save Action Set", false, 5)]
        public static void SaveSerialization()
        {
            var scriptableObject = (ActionSet)ScriptableObject.CreateInstance("AutoGenerated_BriskActionSet");
            if (scriptableObject == null) return;
            AssetDatabase.CreateAsset(scriptableObject, "Assets/Resources/AutoGenerated_BriskActionSet.asset");
            foreach (var config in Resources.FindObjectsOfTypeAll<ServerConfig>())
                config.ActionSet = scriptableObject;
        }

        private static void AddList(StringBuilder result, List<string> actions)
        {
            result.AppendLine("        private static string[] serials = new []{");

            foreach (var action in actions)
                result.AppendLine($@"            ""{action}""");

            result.AppendLine("        };");
        }

        private static void AddActions(StringBuilder result, Dictionary<Type, List<Tuple<MethodInfo, int>>> actions)
        {
            result.AppendLine( "        private readonly System.Collections.Generic.Dictionary<int, System.Action<Brisk.Entities.NetBehaviour, Lidgren.Network.NetIncomingMessage>> actions =");
            result.AppendLine( "            new System.Collections.Generic.Dictionary<int, System.Action<Brisk.Entities.NetBehaviour, Lidgren.Network.NetIncomingMessage>> {");

            foreach (var actionSet in actions)
            foreach (var (method, index) in actionSet.Value)
            {
                result.AppendLine($"                {{{index}, (bhr, msg) => {{");
                AddParameters(result, actionSet.Key.FullName, method);
                result.AppendLine($"                }}}},");
            }
            result.AppendLine( "        };");
            result.AppendLine( "");
            result.AppendLine( "        public override void Call(Brisk.Entities.NetBehaviour bhr, Lidgren.Network.NetIncomingMessage msg, int actionId) {");
            result.AppendLine( "            if (actions.TryGetValue(actionId, out var action)) action(bhr, msg);");
            result.AppendLine(@"            else UnityEngine.Debug.LogError($""Action not found with ID: {actionId}"");");
            result.AppendLine( "        }");
            result.AppendLine( "        public override void Serialize(Lidgren.Network.NetIncomingMessage msg, int actionId, object[] args) {");
            result.AppendLine( "        }");
        }

        private static void AddParameters(StringBuilder result, string fullName, MethodInfo method)
        {
            var i = 0;
            var args = new StringBuilder();
            foreach (var parameter in method.GetParameters())
            {
                result.AppendLine($"                    var arg{++i} = {SerializerGenerator.ReadMessageData(parameter.ParameterType.FullName)};");
                if (args.Length > 0) args.Append(",");
                args.Append("arg");
                args.Append(i);
            }
            result.AppendLine($"                    (({fullName})bhr).{method.Name}({args});");
        }
    }
}
#endif
